<?php
session_start();
include 'db_connection.php';

class BloodDonationController
{
    public static function handleAppointmentSubmission()
    {
        if ($_SERVER["REQUEST_METHOD"] == "POST" && isset($_POST["bloodDonationForm"])) {
            // Validation logic
            $validationResult = self::validateForm($_POST);
            if ($validationResult !== true) {
                $_SESSION['error_message'] = $validationResult;
                header("Location: ../donate.php");
                exit();
            }

            // Data is valid, proceed with insertion
            self::insertDataIntoDatabase($_POST);
        } else {
            echo "Invalid request method.";
        }
    }

    private static function validateForm($postData)
    {
        // Validate Full Name
        if (empty($postData["fullName"])) {
            return "Full name is required.";
        }
        if (strpos($postData["fullName"], ' ') === false) {
            // Handle validation error, for example, redirect back to the form with an error message
            return "Patient name should contain at least two names";
        }

        // Validate Email
        if (empty($postData["email"])) {
            return "Email is required.";
        } elseif (!filter_var($postData["email"], FILTER_VALIDATE_EMAIL)) {
            return "Invalid email format.";
        }

        // Validate Phone Number
        if (empty($postData["phone"])) {
            return "Phone number is required.";
        }

        // Validate Age
        if (empty($postData["age"]) || !is_numeric($postData["age"]) || $postData["age"] < 18) {
            return "Invalid age. Age must be a number and at least 18.";
        }

        // Validate City/Town
        if (empty($postData["cityTown"])) {
            return "City/Town is required.";
        }

        // Validate Health Conditions
        if (empty($postData["healthConditions"])) {
            return "Health conditions are required.";
        }

        // Validate Last Donation Date if previous donations are selected
        if ($postData["previousDonations"] == "yes" && (empty($postData["lastDonationDate"]) || strtotime($postData["lastDonationDate"]) > time())) {
            return "Invalid last donation date.";
        }

        return true; // If all validation checks pass
    }

    private static function insertDataIntoDatabase($postData)
    {
        try {
            // Start a session if not already started
            if (session_status() == PHP_SESSION_NONE) {
                session_start();
            }

            // Get user ID from session
            $userID = $_SESSION['user_id'];

            // Include database connection
            include 'db_connection.php';

            // Set the PDO error mode to exception
            $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);

            // Sanitize and validate data
            $validatedData = self::sanitizeAndValidateData($postData);

            // Bind appointmentDay
            $currentDate = new DateTime('now', new DateTimeZone('UTC'));
            $appointmentDay = $currentDate->add(new DateInterval('P1D'))->format('Y-m-d');

            // Validate appointmentDay to ensure it's not in the past
            if (isset($validatedData['appointmentDay'])) {
                $selectedDate = new DateTime($validatedData['appointmentDay'], new DateTimeZone('UTC'));
                $minDate = new DateTime('tomorrow', new DateTimeZone('UTC'));

                if ($selectedDate < $minDate) {
                    $_SESSION['error_message'] = "Invalid appointment date. Please choose a date in the future.";
                    header("Location: ../donate.php");
                    exit();
                }
            }

            $sql = "INSERT INTO BloodDonationAppointment (
                userID, fullName, email, phoneNumber, gender, age,
                bloodType, cityTown, bloodDonationCenter, previousDonations,
                lastDonationDate, healthConditions, preferredContact,
                availability, donationFrequency, additionalComments, appointmentDay, pdfContent
            )
            VALUES (
                :userID, :fullName, :email, :phone, :gender, :age,
                :bloodType, :cityTown, :bloodDonationCenter, :previousDonations,
                :lastDonationDate, :healthConditions, :preferredContact,
                :availability, :donationFrequency, :additionalComments, :appointmentDay, :pdfContent
            )";

            $stmt = $pdo->prepare($sql);

            // Bind parameters using validated data
            $stmt->bindParam(':userID', $userID);
            $stmt->bindParam(':fullName', $validatedData['fullName']);
            $stmt->bindParam(':email', $validatedData['email']);
            $stmt->bindParam(':phone', $validatedData['phone']);
            $stmt->bindParam(':gender', $validatedData['gender']);
            $stmt->bindParam(':age', $validatedData['age']);
            $stmt->bindParam(':bloodType', $validatedData['bloodType']);
            $stmt->bindParam(':cityTown', $validatedData['cityTown']);
            $stmt->bindParam(':bloodDonationCenter', $validatedData['bloodDonationCenter']);
            $stmt->bindParam(':previousDonations', $validatedData['previousDonations']);
            $stmt->bindParam(':lastDonationDate', $validatedData['lastDonationDate']);
            $stmt->bindParam(':healthConditions', $validatedData['healthConditions']);
            $stmt->bindParam(':preferredContact', $validatedData['preferredContact']);
            $stmt->bindParam(':availability', $validatedData['availability']);
            $stmt->bindParam(':donationFrequency', $validatedData['donationFrequency']);
            $stmt->bindParam(':additionalComments', $validatedData['additionalComments']);
            $stmt->bindParam(':appointmentDay', $appointmentDay);
            $stmt->bindParam(':pdfContent', $pdfContent, PDO::PARAM_LOB);

            // Get the PDF content
            $pdfContent = self::generatePDF($postData);

            // Execute the statement
            $stmt->execute();

            // Set success message
            $_SESSION['success_message'] = "Your appointment has been taken successfully";
            header("Location: ../donate.php");
            exit();
        } catch (PDOException $e) {
            // Handle database errors
            $_SESSION['error_message'] = "Error: " . $e->getMessage();
            header("Location: ../donate.php");
            exit();
        } catch (Exception $e) {
            // Handle other exceptions (e.g., PDF generation errors)
            $_SESSION['error_message'] = "Error: " . $e->getMessage();
            header("Location: ../donate.php");
            exit();
        }
    }

    private static function generatePDF($postData)
    {
        require('../TCPDF-main/tcpdf.php');

        try {
            // Create a new TCPDF instance
            $pdf = new TCPDF();
            $pdf->AddPage();

            // Set font to a stylish font like 'times' and increase font size for title
            $pdf->SetFont('times', 'B', 22);

            // Title in a deep red color
            $pdf->SetTextColor(178, 34, 34);
            $pdf->Cell(0, 20, 'Blood Donation Appointment Details', 0, 1, 'C');
            $pdf->SetTextColor(0, 0, 0); // Reset text color

            // Add a decorative border around the title
            $pdf->SetLineWidth(1);
            $pdf->Cell(0, 0, '', 'T');

            // Use a modern font style for field labels and data
            $pdf->SetFont('times', 'B', 14);

            // Map form field names to custom labels
            $fieldLabels = array(
                'userID' => 'Appointment Id',
                'fullName' => 'Full Name',
                'email' => 'Email',
                'phone' => 'Phone Number',
                'gender' => 'Gender',
                'age' => 'Age',
                'bloodType' => 'Blood Type',
                'cityTown' => 'City/Town',
                'bloodDonationCenter' => 'Blood Donation Center',
                'previousDonations' => 'Previous Donations',
                'lastDonationDate' => 'Last Donation Date',
                'healthConditions' => 'Health Conditions',
                'preferredContact' => 'Preferred Contact',
                'availability' => 'Availability',
                'donationFrequency' => 'Donation Frequency',
                'additionalComments' => 'Additional Comments',
                'appointmentDay' => 'Appointment Day',
            );

            // Add appointment details with improved styling
            foreach ($fieldLabels as $key => $label) {
                if (isset($postData[$key])) {
                    $pdf->Ln(1); // Add some space between each field
                    $pdf->Cell(60, 12, $label . ':', 0, 0);
                    $pdf->SetFont('times', '', 14);
                    $pdf->Cell(0, 12, $postData[$key], 0, 1);
                    $pdf->SetFont('times', 'B', 14); // Reset font style
                }
            }

            // Add a decorative line
            $pdf->SetLineWidth(0.5);
            $pdf->Line(10, $pdf->GetY(), 200, $pdf->GetY());

            // Add a stylish thank-you paragraph
            $pdf->Ln(4);
            $pdf->SetTextColor(178, 34, 34);
            $thankYouMessage = "Gafus Thanks you for choosing to donate blood. Your generosity can save lives and make a difference. We appreciate your kindness and support.";
            $pdf->SetFont('times', 'I', 16);
            $pdf->MultiCell(0, 15, $thankYouMessage);

            // Add a footer with page number in a classy style
            $pdf->SetY(-25);
            $pdf->SetFont('times', 'I', 10);
            $pdf->Cell(0, 10, 'Page ' . $pdf->getAliasNumPage() . '/' . $pdf->getAliasNbPages(), 0, 0, 'C');

            // Output the PDF content
            ob_start();
            $pdf->Output('appointment.pdf', 'S');
            $pdfContent = ob_get_clean();

            return $pdfContent;
        } catch (Exception $e) {
            // Handle PDF generation errors
            error_log('PDF Generation Error: ' . $e->getMessage());
            return false;
        }
    }

    private static function sanitizeAndValidateData($postData)
    {
        // Sanitize and validate data as needed
        // For simplicity, you can use htmlspecialchars for sanitization
        foreach ($postData as $key => $value) {
            $postData[$key] = htmlspecialchars(trim($value));
        }

        return $postData;
    }
}

BloodDonationController::handleAppointmentSubmission();
?>
